// DataHandler.h
#ifndef DATA_HANDLER_H
#define DATA_HANDLER_H

/**
 * DataHandler class handles storage and lookup of integers.
 *
 * Design Philosophy:
 *   Lightweight, encapsulated utility for storing and searching integers
 *
 * Usage Assumptions:
 *   - add() won't be called beyond capacity
 *   - find() performs a linear search
 *
 * Interface contains all needed to use this class without exposing internals.
 */
//DataHandler.h â€” class declaration and brief documentation



// DataHandler.cpp
#include "DataHandler.h"
#include <iostream>
using namespace std;

// Constructor: initializes storage array and tracking index
DataHandler::DataHandler(int c) {
    cap = c;
    d = new int[cap];
    p = 0;
}

// Destructor: releases allocated memory
DataHandler::~DataHandler() {
    delete[] d;
}

// Adds an element to the array if there's space
void DataHandler::add(int v) {
    if (p < cap) {
        d[p++] = v;
    }
}

// Finds the index of a target value in the array
int DataHandler::find(int t) {
    for (int i = 0; i < p; ++i) {
        if (d[i] == t)
            return i;
    }
    return -1;
}
