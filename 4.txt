#include <iostream>
using namespace std;

/*
 * Combined file for online compilation.
 * This includes the class and utility functions.
 */

// --- DataHandler.h ---
class DataHandler {
private:
    int* d;
    int cap;
    int p;

public:
    DataHandler(int c);
    ~DataHandler();
    void add(int v);
    int find(int t);
};

// --- DataHandler.cpp ---
DataHandler::DataHandler(int c) {
    cap = c;
    d = new int[cap];
    p = 0;
}

DataHandler::~DataHandler() {
    delete[] d;
}

void DataHandler::add(int v) {
    if (p < cap) {
        d[p++] = v;
    }
}

int DataHandler::find(int t) {
    for (int i = 0; i < p; ++i) {
        if (d[i] == t)
            return i;
    }
    return -1;
}

// --- utils_refactored.cpp ---
int calc(int a, int b, char op) {
    switch (op) {
        case '+':
            return a + b;
        case '-':
            return a - b;
        case '*':
            return a * b;
        case '/':
            if (b == 0) {
                cerr << "Error: Division by zero" << endl;
                return 0;
            }
            return a / b;
        default:
            cerr << "Invalid operator" << endl;
            return 0;
    }
}

void processArr(double arr[], int sz) {
    double sum = 0;
    for (int i = 0; i < sz; ++i) {
        sum += arr[i];
    }
    double avg = sum / sz;
    int count = 0;
    for (int j = 0; j < sz; ++j) {
        if (arr[j] > avg) {
            count++;
        }
    }
    cout << "Elements above avg: " << count << endl;
}

// --- main() for testing ---
int main() {
    cout << \"Calc test (10 / 2): \" << calc(10, 2, '/') << endl;

    double nums[] = {10.5, 5.3, 8.7, 12.1};
    processArr(nums, 4);

    DataHandler dh(5);
    dh.add(7);
    dh.add(3);
    dh.add(10);

    cout << \"Find 3: \" << dh.find(3) << endl;
    cout << \"Find 8: \" << dh.find(8) << endl;

    return 0;
}
